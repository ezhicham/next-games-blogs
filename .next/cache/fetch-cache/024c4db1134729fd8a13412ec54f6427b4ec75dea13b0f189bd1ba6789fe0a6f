{"kind":"FETCH","data":{"headers":{"access-control-allow-credentials":"true","alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"8b78b0391ea6cfea-MAD","connection":"keep-alive","content-encoding":"br","content-security-policy":"connect-src 'self' https:;img-src 'self' data: blob: res.cloudinary.com;media-src 'self' data: blob: res.cloudinary.com;default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'","content-type":"application/json; charset=utf-8","date":"Fri, 23 Aug 2024 05:26:33 GMT","referrer-policy":"no-referrer","rndr-id":"cb9e1da5-4e9a-4bf8","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains","transfer-encoding":"chunked","vary":"Origin, Accept-Encoding","x-content-type-options":"nosniff","x-dns-prefetch-control":"off","x-download-options":"noopen","x-frame-options":"SAMEORIGIN","x-permitted-cross-domain-policies":"none","x-powered-by":"Strapi <strapi.io>","x-render-origin-server":"Render"},"body":"","status":200,"url":"https://strapi-blog-demo-yuir.onrender.com/api/blogs?populate=*"},"revalidate":60,"tags":[]}